{"version":3,"sources":["redux/actions/types.js","redux/reducers/reducers.js","redux/root-reducer.js","redux/store.js","components/Menu.jsx","redux/utils/game-utils.js","redux/apis/actions-log.js","redux/actions/actions.js","pages/TitleBar.jsx","components/Square.jsx","components/Board.jsx","components/PlayerInfo.jsx","components/GameoverDialog.jsx","pages/Game.jsx","App.js","index.js"],"names":["MOVE","WINNER","move","board","player","row","col","updated","slice","initialStatecreateActionLog","combineReducers","createLog","state","type","payload","fetchLogs","gameover","winner","configStore","middlewares","thunk","store","createStore","RootReducer","applyMiddleware","Menu","PropTypes","func","bool","open","onItemClick","onClose","Drawer","anchor","List","ListItem","button","onClick","ListItemIcon","Icon","ListItemText","winningPatterns","r","c","axios","create","baseURL","newGame","TitleBar","props","context","handleMenuClick","setState","menuOpen","handleMenuClose","handleNewGameClick","itemKey","classes","this","AppBar","Toolbar","IconButton","className","menuButton","color","aria-label","Typography","variant","Component","mapDispatchToProps","object","styledTitleBar","withStyles","marginLeft","marginRight","connect","theme","icon","fontSize","playerIcon","borderStyle","arrayOf","number","square","height","width","lineHeight","cursor","marked","textAlign","borderLeft","borderRight","border","borderTop","borderBottom","onMove","Grid","container","map","rIdx","key","item","xs","justify","cIdx","classnames","PlayerInfo","style","withMobileDialog","fullScreen","isDraw","title","Dialog","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","autoFocus","Game","handleBoardOnMove","a","playTurn","checkWinner","hasWinner","setGameHistory","showDialog","handleDialogClick","answer","handleDialogClose","date","gameId","result","Date","toLocaleDateString","Math","floor","random","createActionLog","fetchActionLogs","history","fatchLogs","draw","spacing","sm","md","TableContainer","component","Paper","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","log","index","scope","array","dispatch","nextPlayer","movePlayer","switchPlayer","some","pattern","every","isWinner","formValues","getState","ActionLogApi","post","response","data","get","content","paddingTop","mixins","toolbar","minHeight","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef13df15.chunk.js","sourcesContent":["export const NEW_GAME = 'GAME_NEW';\r\nexport const GAMEOVER = 'GAME_OVER';\r\nexport const MOVE = 'GAME_MOVE';\r\nexport const PLAYER = 'GAME_PLAYER';\r\nexport const WINNER = 'GAME_WINNER';\r\nexport const CREATE_ACTION_LOG = 'CREATE_ACTION_LOG';\r\nexport const FETCH_ACTION_LOGS = 'FETCH_ACTION_LOGS';","import {\r\n  NEW_GAME,\r\n  GAMEOVER,\r\n  MOVE,\r\n  PLAYER,\r\n  WINNER,\r\n  CREATE_ACTION_LOG,\r\n  FETCH_ACTION_LOGS,\r\n} from \"../actions/types\";\r\n\r\nconst emptyBoard = () => [\r\n  [0, 0, 0],\r\n  [0, 0, 0],\r\n  [0, 0, 0],\r\n];\r\n\r\nexport const move = (board, { player, row, col }) => {\r\n  const updated = board.slice();\r\n\r\n  updated[row][col] = player;\r\n\r\n  return updated;\r\n};\r\n\r\nexport const boardReducer = (state = [[]], { type, payload }) => {\r\n  switch (type) {\r\n    case NEW_GAME:\r\n      return emptyBoard();\r\n    case MOVE:\r\n      return move(state, payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const gameoverReducer = (state = false, { type, payload }) => {\r\n  switch (type) {\r\n    case NEW_GAME:\r\n      return false;\r\n    case GAMEOVER:\r\n      return true;\r\n    case WINNER:\r\n      return true;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const winnerReducer = (state = -1, { type, payload }) => {\r\n  switch (type) {\r\n    case WINNER:\r\n      return payload;\r\n    case NEW_GAME:\r\n      return -1;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const playerReducer = (state = 1, { type, payload }) => {\r\n  switch (type) {\r\n    case PLAYER:\r\n      return payload;\r\n    case NEW_GAME:\r\n      return 1;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStatecreateActionLog = {};\r\n\r\nexport const createActionLogReducer = (\r\n  state = initialStatecreateActionLog,\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case CREATE_ACTION_LOG:\r\n      return { ...state, ...payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const fetchActionLogsReducer = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case FETCH_ACTION_LOGS:\r\n      return [...state, ...payload];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport {\r\n  boardReducer,\r\n  gameoverReducer,\r\n  winnerReducer,\r\n  playerReducer,\r\n  createActionLogReducer,\r\n  fetchActionLogsReducer\r\n} from \"./reducers/reducers\";\r\n\r\nexport default combineReducers({\r\n  createLog: createActionLogReducer,\r\n  fetchLogs: fetchActionLogsReducer,\r\n  board: boardReducer,\r\n  gameover: gameoverReducer,\r\n  winner: winnerReducer,\r\n  player: playerReducer,\r\n  \r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n// Root Reducer\r\nimport RootReducer from \"./root-reducer\";\r\n\r\nconst configStore = (state = {}) => {\r\n  const middlewares = [thunk];\r\n  const store = createStore(\r\n    RootReducer,\r\n    state,\r\n    applyMiddleware(...middlewares)\r\n  );\r\n  return store;\r\n};\r\n\r\nexport default configStore;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\n\r\nconst Menu = ({ open, onItemClick, onClose }) => {\r\n\r\n  return (\r\n    <Drawer open={open} onClose={onClose} anchor=\"top\">\r\n      <List>\r\n        <ListItem button onClick={() => onItemClick('new')}>\r\n          <ListItemIcon>\r\n            <Icon>fiber_new</Icon>\r\n          </ListItemIcon>\r\n          <ListItemText>New game</ListItemText>\r\n        </ListItem>\r\n      </List>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nconst { func, bool } = PropTypes;\r\n\r\nMenu.propTypes = {\r\n  open: bool.isRequired,\r\n  onItemClick: func.isRequired,\r\n  onClose: func.isRequired\r\n};\r\n\r\nexport default Menu;","/*\r\n  rows          crosses       columns\r\n  ['X','X','X'] ['X',' ',' '] ['X',' ',' '] \r\n  [' ',' ',' '] [' ','X',' '] ['X',' ',' ']\r\n  [' ',' ',' '] [' ',' ','X'] ['X',' ',' ']\r\n                \r\n  [' ',' ',' '] [' ',' ',' '] [' ','X',' ']\r\n  ['X','X','X'] [' ',' ',' '] [' ','X',' ']\r\n  [' ',' ',' '] [' ',' ',' '] [' ','X',' ']\r\n  \r\n  [' ',' ',' '] [' ',' ','X'] [' ',' ','X']\r\n  [' ',' ',' '] [' ','X',' '] [' ',' ','X']\r\n  ['X','X','X'] ['X',' ',' '] [' ',' ','X']\r\n*/\r\n\r\nconst winningPatterns = [\r\n  // rows\r\n  [\r\n    { r: 0, c: 0 },\r\n    { r: 0, c: 1 },\r\n    { r: 0, c: 2 },\r\n  ],\r\n  [\r\n    { r: 1, c: 0 },\r\n    { r: 1, c: 1 },\r\n    { r: 1, c: 2 },\r\n  ],\r\n  [\r\n    { r: 2, c: 0 },\r\n    { r: 2, c: 1 },\r\n    { r: 2, c: 2 },\r\n  ],\r\n  // crosses\r\n  [\r\n    { r: 0, c: 0 },\r\n    { r: 1, c: 1 },\r\n    { r: 2, c: 2 },\r\n  ],\r\n  [\r\n    { r: 0, c: 2 },\r\n    { r: 1, c: 1 },\r\n    { r: 2, c: 0 },\r\n  ],\r\n  // columns\r\n  [\r\n    { r: 0, c: 0 },\r\n    { r: 1, c: 0 },\r\n    { r: 2, c: 0 },\r\n  ],\r\n  [\r\n    { r: 0, c: 1 },\r\n    { r: 1, c: 1 },\r\n    { r: 2, c: 1 },\r\n  ],\r\n  [\r\n    { r: 0, c: 2 },\r\n    { r: 1, c: 2 },\r\n    { r: 2, c: 2 },\r\n  ],\r\n];\r\n\r\nexport const isWinner = (board, player) => {\r\n  \r\n  return winningPatterns.some((pattern) =>\r\n    pattern.every((square) => {\r\n      const { r, c } = square;\r\n\r\n      return board[r][c] === player;\r\n    })\r\n  );\r\n};\r\n\r\nexport const isDraw = (board) => {\r\n  // if there are squares that have a 0 in them, that means the\r\n  // game is still in-progress\r\n  const notDraw = board.some((row) => row.some((col) => col === 0));\r\n\r\n  return !notDraw;\r\n};\r\n","\r\nimport axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://fierce-eyrie-05319.herokuapp.com'\r\n})","import {\r\n  NEW_GAME,\r\n  GAMEOVER,\r\n  MOVE,\r\n  PLAYER,\r\n  WINNER,\r\n  CREATE_ACTION_LOG,\r\n  FETCH_ACTION_LOGS,\r\n} from \"./types\";\r\nimport { isDraw, isWinner } from \"../utils/game-utils\";\r\nimport ActionLogApi from \"../apis/actions-log\";\r\n\r\nconst gameover = () => ({\r\n  type: GAMEOVER,\r\n});\r\n\r\nconst movePlayer = (player, row, col) => ({\r\n  type: MOVE,\r\n  payload: { player, row, col },\r\n});\r\n\r\nconst switchPlayer = (player) => ({\r\n  type: PLAYER,\r\n  payload: player,\r\n});\r\n\r\nconst winner = (player) => ({\r\n  type: WINNER,\r\n  payload: player,\r\n});\r\n\r\nexport const newGame = () => ({\r\n  type: NEW_GAME,\r\n});\r\n\r\nexport const checkWinner = (board, player) => (dispatch) => {\r\n  let hasWinner = true;\r\n\r\n  if (isWinner(board, player)) {\r\n    dispatch(winner(player));\r\n    dispatch(gameover());\r\n  } else if (isDraw(board)) {\r\n    dispatch(winner(0));\r\n    dispatch(gameover());\r\n  } else {\r\n    hasWinner = false;\r\n  }\r\n\r\n  return hasWinner;\r\n};\r\n\r\nexport const playTurn = (player, row, col) => (dispatch) => {\r\n  let nextPlayer;\r\n\r\n  switch (player) {\r\n    case 1:\r\n      nextPlayer = 2;\r\n      break;\r\n    case 2:\r\n      nextPlayer = 1;\r\n      break;\r\n    default:\r\n      // throw error?\r\n      break;\r\n  }\r\n\r\n  dispatch(movePlayer(player, row, col));\r\n  dispatch(switchPlayer(nextPlayer));\r\n};\r\n\r\nexport const createActionLog = (formValues) => async (dispatch, getState) => {\r\n  const response = await ActionLogApi.post(\"/actionlogs\", { ...formValues });\r\n  \r\n  dispatch({\r\n    type: CREATE_ACTION_LOG,\r\n    payload: response.data,\r\n  });\r\n};\r\n\r\nexport const fetchActionLogs = () => async (dispatch) => {\r\n  const response = await ActionLogApi.get(\"/actionlogs\");\r\n  dispatch({\r\n    type: FETCH_ACTION_LOGS,\r\n    payload: response.data,\r\n  });\r\n};\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\n\r\nimport Menu from \"../components/Menu.jsx\";\r\n\r\nimport { newGame } from \"../redux/actions/actions\";\r\n\r\nconst styles = () => ({\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n});\r\n\r\nclass TitleBar extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.state = {\r\n      menuOpen: false,\r\n    };\r\n\r\n  }\r\n\r\n  handleMenuClick = () => {\r\n    this.setState({ menuOpen: true });\r\n  }\r\n\r\n  handleMenuClose = () => {\r\n    this.setState({ menuOpen: false });\r\n  }\r\n\r\n  handleNewGameClick = (itemKey) => {\r\n    if (itemKey === \"new\") {\r\n      this.props.newGame();\r\n    }\r\n\r\n    this.setState({ menuOpen: false });\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { menuOpen } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <AppBar>\r\n          <Toolbar>\r\n            <IconButton\r\n              className={classes.menuButton}\r\n              color=\"inherit\"\r\n              aria-label=\"Menu\"\r\n              onClick={this.handleMenuClick}\r\n            >\r\n              <Icon>menu</Icon>\r\n            </IconButton>\r\n            <Typography variant=\"h5\" color=\"inherit\">\r\n              Tic Tac Toe\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Menu\r\n          open={menuOpen}\r\n          onItemClick={this.handleNewGameClick}\r\n          onClose={this.handleMenuClose}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst { object, func } = PropTypes;\r\n\r\nTitleBar.propTypes = {\r\n  classes: object.isRequired,\r\n  newGame: func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  newGame,\r\n};\r\n\r\nconst styledTitleBar = withStyles(styles)(TitleBar);\r\n\r\nexport default connect(null, mapDispatchToProps)(styledTitleBar);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\n\r\nconst styles = (theme) => ({\r\n  icon: {\r\n    fontSize: \"2em\", // double the size of the square's font size\r\n  },\r\n});\r\n\r\nconst playerIcon = (player) => {\r\n  switch (player) {\r\n    case 1:\r\n      return \"clear\"; // X\r\n    case 2:\r\n      return \"panorama_fish_eye\"; // O\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nconst Square = ({ classes, player }) => (\r\n  <Icon className={classes.icon}>{playerIcon(player)}</Icon>\r\n);\r\n\r\nSquare.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  player: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Square);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport classnames from \"classnames\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport Square from \"./Square.jsx\";\r\n\r\nconst borderStyle = \"1px solid black\";\r\n\r\nconst styles = (theme) => ({\r\n  square: {\r\n    height: 100,\r\n    width: 100,\r\n    lineHeight: \"100px\",\r\n    fontSize: \"48px\",\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  marked: {\r\n    cursor: \"not-allowed\",\r\n  },\r\n  row: {\r\n    textAlign: \"center\",\r\n  },\r\n  // these styles make up the border of the game cross pattern\r\n  \"0_1\": { borderLeft: borderStyle, borderRight: borderStyle },\r\n  \"2_1\": { borderLeft: borderStyle, borderRight: borderStyle },\r\n  \"1_1\": { border: borderStyle },\r\n  \"1_0\": { borderTop: borderStyle, borderBottom: borderStyle },\r\n  \"1_2\": { borderTop: borderStyle, borderBottom: borderStyle },\r\n});\r\n\r\nconst Board = ({ classes, board, onMove }) => {\r\n  return (\r\n    <Grid container>\r\n      {board.map((row, rIdx) => (\r\n        <Grid key={rIdx} item xs={12} className={classes.row}>\r\n          <Grid container justify=\"center\">\r\n            {row.map((col, cIdx) => {\r\n              const border = classes[`${rIdx}_${cIdx}`] || \"\";\r\n              const marked = col !== 0 ? classes.marked : \"\";\r\n              return (\r\n                <Grid\r\n                  key={cIdx}\r\n                  item\r\n                  className={classnames(classes.square, border, marked)}\r\n                  onClick={() => onMove({ row: rIdx, col: cIdx })}\r\n                >\r\n                  <Square player={col} />\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst { arrayOf, number, object, func } = PropTypes;\r\n\r\nBoard.propTypes = {\r\n  classes: object.isRequired,\r\n  board: arrayOf(arrayOf(number)).isRequired,\r\n  onMove: func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Board);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst PlayerInfo = ({ player, gameover }) => {\r\n  return (\r\n   \r\n      <h1 style={{textAlign: \"center\"}} variant=\"body1\">\r\n        {gameover && \"Gameover!\"}\r\n        {!gameover && `Player: ${player}`}\r\n      </h1>\r\n   \r\n  );\r\n};\r\n\r\nconst { number, bool } = PropTypes;\r\n\r\nPlayerInfo.propTypes = {\r\n  player: number.isRequired,\r\n  gameover: bool.isRequired,\r\n};\r\n\r\nexport default PlayerInfo;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  withMobileDialog,\r\n} from \"@material-ui/core\";\r\n\r\nconst GameoverDialog = ({\r\n  fullScreen,\r\n  open,\r\n  isDraw,\r\n  player,\r\n  onClick,\r\n  onClose,\r\n}) => {\r\n  const title = isDraw ? \"Draw!\" : `Player - ${player} wins!`;\r\n\r\n  return (\r\n    <Dialog\r\n      fullScreen={fullScreen}\r\n      open={open}\r\n      onClose={onClose}\r\n      aria-labelledby=\"responsive-dialog-title\"\r\n    >\r\n      <DialogTitle id=\"responsive-dialog-title\">{title}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>\r\n          Would you like to start a new game?\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={() => onClick(false)} color=\"secondary\">\r\n          No\r\n        </Button>\r\n        <Button onClick={() => onClick(true)} color=\"primary\" autoFocus>\r\n          Yes\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst { func, bool, number } = PropTypes;\r\n\r\nGameoverDialog.propTypes = {\r\n  fullScreen: bool.isRequired,\r\n  open: bool.isRequired,\r\n  isDraw: bool.isRequired,\r\n  player: number.isRequired,\r\n  onClick: func.isRequired,\r\n  onClose: func.isRequired,\r\n};\r\n\r\nexport default withMobileDialog()(GameoverDialog);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes, { object } from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport {\r\n  playTurn,\r\n  checkWinner,\r\n  newGame,\r\n  createActionLog,\r\n  fetchActionLogs,\r\n} from \"../redux/actions/actions\";\r\n\r\nimport Board from \"../components/Board.jsx\";\r\nimport PlayerInfo from \"../components/PlayerInfo.jsx\";\r\nimport GameoverDialog from \"../components/GameoverDialog.jsx\";\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showDialog: false,\r\n      history: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchActionLogs();\r\n  }\r\n\r\n  handleBoardOnMove = async (square) => {\r\n    const { board, player, gameover, playTurn, checkWinner } = this.props;\r\n    const { row, col } = square;\r\n\r\n    if (gameover || board[row][col] !== 0) {\r\n      return;\r\n    }\r\n\r\n    await playTurn(player, row, col);\r\n\r\n    const hasWinner = await checkWinner(board, player);\r\n    this.setGameHistory(this.props, hasWinner);\r\n\r\n    if (hasWinner) {\r\n      this.setState({ showDialog: true });\r\n    }\r\n  };\r\n\r\n  handleDialogClick = (answer) => {\r\n    if (answer) {\r\n      this.props.newGame();\r\n    }\r\n\r\n    this.setState({ showDialog: false });\r\n  };\r\n\r\n  handleDialogClose = () => {\r\n    this.setState({ showDialog: false });\r\n  };\r\n\r\n  setGameHistory = async ({ player, winner, gameover }) => {\r\n    if (gameover) {\r\n      const isDraw = winner === 0;\r\n      let createLog = {\r\n        date: null,\r\n        gameId: null,\r\n        result: null,\r\n        player: null,\r\n      };\r\n\r\n      createLog.date = new Date().toLocaleDateString();\r\n      createLog.gameId = Math.floor(Math.random() * 100 + 1);\r\n      createLog.result = isDraw ? \"Draw\" : `Winner`;\r\n      createLog.player = isDraw ? null : player;\r\n\r\n      await this.props.createActionLog(createLog);\r\n      await this.props.fetchActionLogs();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { showDialog } = this.state;\r\n    const { board, player, gameover, winner, fatchLogs } = this.props;\r\n    const draw = winner === 0;\r\n\r\n    return (\r\n      <div>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <PlayerInfo player={player} gameover={gameover} />\r\n            <Board board={board} onMove={this.handleBoardOnMove} />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={8}>\r\n            <TableContainer component={Paper}>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Id</TableCell>\r\n                    <TableCell align=\"right\">GameId</TableCell>\r\n                    <TableCell align=\"right\">Date</TableCell>\r\n                    <TableCell align=\"right\">Player</TableCell>\r\n                    <TableCell align=\"right\">Result</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {fatchLogs.map((log, index) => {\r\n                    return (\r\n                      <TableRow key={index}>\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          {\" \"}\r\n                          {log.id}\r\n                        </TableCell>\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          {\" \"}\r\n                          {log.gameId}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">{log.date}</TableCell>\r\n                        <TableCell align=\"right\">{log.player}</TableCell>\r\n                        <TableCell align=\"right\">{log.result}</TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n        </Grid>\r\n        <GameoverDialog\r\n          open={showDialog}\r\n          isDraw={draw}\r\n          player={winner}\r\n          onClick={this.handleDialogClick}\r\n          onClose={this.handleDialogClose}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst { arrayOf, number, func, bool, array } = PropTypes;\r\n\r\nGame.propTypes = {\r\n  board: arrayOf(arrayOf(number)).isRequired,\r\n  player: number.isRequired,\r\n  winner: number.isRequired,\r\n  gameover: bool.isRequired,\r\n  playTurn: func.isRequired,\r\n  checkWinner: func.isRequired,\r\n  newGame: func.isRequired,\r\n  fatchLogs: array.isRequired,\r\n  createLog: object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  board: state.board,\r\n  player: state.player,\r\n  gameover: state.gameover,\r\n  winner: state.winner,\r\n  fatchLogs: state.fetchLogs,\r\n  createLog: state.createLog,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  playTurn,\r\n  checkWinner,\r\n  newGame,\r\n  createActionLog,\r\n  fetchActionLogs,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport TitleBar from \"./pages/TitleBar\";\nimport Game from \"./pages/Game\";\n\n\n\nconst styles = (theme) => ({\n  content: {\n    paddingTop: theme.mixins.toolbar.minHeight + 10,\n  },\n});\n\nconst App = ({ classes }) => {\n  return (\n    <div>\n      <div>\n        <header>\n         <TitleBar/>\n        </header>\n      </div>\n      <div className={classes.content}>\n        <section>\n        <Game/>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport configStore from \"./redux/store\";\nimport App from \"./App\";\nimport { newGame } from \"./redux/actions/actions\";\n\n\n// At a later point, we can pull the state stored in local storage (or another source)\n// and use it to create the store from a previous state.\n\nconst initState = null;\nconst store = configStore(initState || {});\nif (!initState) {\n  store.dispatch(newGame());\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}